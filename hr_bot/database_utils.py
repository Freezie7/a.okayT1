import sys
import os
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –æ–±—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(parent_dir, 'database', 'users.db')

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π
class DBWrapper:
    def __init__(self):
        self.connection = None
    
    async def get_all_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, name, xp FROM users WHERE name IS NOT NULL ORDER BY xp DESC')
        users = [dict(row) for row in cursor.fetchall()]
        conn.close()
        return users
    
    async def get_users_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) as count FROM users')
        result = cursor.fetchone()
        conn.close()
        return result['count'] if result else 0
    
    async def get_users_with_names_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) as count FROM users WHERE name IS NOT NULL')
        result = cursor.fetchone()
        conn.close()
        return result['count'] if result else 0
    
    async def get_active_users_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) as count FROM users WHERE xp > 0 AND name IS NOT NULL')
        result = cursor.fetchone()
        conn.close()
        return result['count'] if result else 0
    
    async def get_total_skills_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤"""
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) as count FROM user_languages')
        lang_count_result = cursor.fetchone()
        lang_count = lang_count_result['count'] if lang_count_result and lang_count_result['count'] is not None else 0
        
        cursor.execute('SELECT COUNT(*) as count FROM user_programming')
        prog_count_result = cursor.fetchone()
        prog_count = prog_count_result['count'] if prog_count_result and prog_count_result['count'] is not None else 0
        
        cursor.execute('SELECT COUNT(*) as count FROM user_skills')
        skills_count_result = cursor.fetchone()
        skills_count = skills_count_result['count'] if skills_count_result and skills_count_result['count'] is not None else 0
        
        conn.close()
        return lang_count + prog_count + skills_count
    
    async def get_vacancies(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM hr_vacancies WHERE status = "open" ORDER BY created_at DESC')
        vacancies = [dict(row) for row in cursor.fetchall()]
        conn.close()
        return vacancies

    async def get_vacancy(self, vacancy_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ ID"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM hr_vacancies WHERE id = ?', (vacancy_id,))
        vacancy = cursor.fetchone()
        conn.close()
        return dict(vacancy) if vacancy else None
    
    async def add_vacancy(self, title: str, description: str, required_skills: str, created_by: int):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO hr_vacancies (title, description, required_skills, created_by, status) VALUES (?, ?, ?, ?, ?)',
            (title, description, required_skills, created_by, 'open')
        )
        conn.commit()
        vacancy_id = cursor.lastrowid
        conn.close()
        return vacancy_id

    async def close_vacancy(self, vacancy_id: int):
        """–ó–∞–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('UPDATE hr_vacancies SET status = "closed" WHERE id = ?', (vacancy_id,))
        conn.commit()
        conn.close()
    
    async def search_employees_by_skills_simple(self, skills):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –Ω–∞–≤—ã–∫–∞–º"""
        conn = get_db_connection()
        cursor = conn.cursor()
        
        if not skills:
            return None
        
        response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        found_any = False
        
        for skill in skills:
            query = '''
            SELECT u.user_id, u.name, u.xp 
            FROM users u
            WHERE u.name IS NOT NULL AND (
                EXISTS (SELECT 1 FROM user_languages WHERE user_id = u.user_id AND language LIKE ?) OR
                EXISTS (SELECT 1 FROM user_programming WHERE user_id = u.user_id AND language LIKE ?) OR
                EXISTS (SELECT 1 FROM user_skills WHERE user_id = u.user_id AND skill LIKE ?)
            )
            LIMIT 5
            '''
            
            search_term = f"%{skill}%"
            cursor.execute(query, (search_term, search_term, search_term))
            employees = cursor.fetchall()
            
            if employees:
                found_any = True
                response += f"–ù–∞–≤—ã–∫: {skill}\n"
                for emp in employees:
                    response += f"‚Ä¢ {emp['name']} ({emp['xp']} XP)\n"
                response += "\n"
        
        conn.close()
        
        if not found_any:
            return None
        
        return response


    async def search_employees_by_skills_simple2(self, skills):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –Ω–∞–≤—ã–∫–∞–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id."""
        conn = get_db_connection()
        cursor = conn.cursor()

        if not skills:
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ—Ç

        user_ids = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è user_id

        for skill in skills:
            query = '''
            SELECT u.user_id, u.name, u.xp
            FROM users u
            WHERE u.name IS NOT NULL AND (
                EXISTS (SELECT 1 FROM user_languages WHERE user_id = u.user_id AND language LIKE ?) OR
                EXISTS (SELECT 1 FROM user_programming WHERE user_id = u.user_id AND language LIKE ?) OR
                EXISTS (SELECT 1 FROM user_skills WHERE user_id = u.user_id AND skill LIKE ?)
            )
            LIMIT 5
            '''

            search_term = f"%{skill}%"
            cursor.execute(query, (search_term, search_term, search_term))
            employees = cursor.fetchall()

            if employees:
                for emp in employees:
                    user_ids.append(emp[0])  # –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ —Å–ø–∏—Å–æ–∫

        if not user_ids:
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

        return user_ids # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id

    async def search_employees_by_skills_detailed(self, skills: list):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –Ω–∞–≤—ã–∫–∞–º"""
        conn = get_db_connection()
        cursor = conn.cursor()
        
        if not skills:
            return None
        
        placeholders = ','.join('?' * len(skills))
        
        query = f'''
        SELECT u.user_id, u.name, u.xp, u.career_goal,
            (SELECT GROUP_CONCAT(language || ' (' || level || ')') 
                FROM user_languages WHERE user_id = u.user_id) as languages,
            (SELECT GROUP_CONCAT(language || ' (' || level || ')') 
                FROM user_programming WHERE user_id = u.user_id) as programming,
            (SELECT GROUP_CONCAT(skill || ' (' || level || ')') 
                FROM user_skills WHERE user_id = u.user_id) as skills
        FROM users u
        WHERE u.name IS NOT NULL AND (
            EXISTS (SELECT 1 FROM user_languages WHERE user_id = u.user_id AND language IN ({placeholders})) OR
            EXISTS (SELECT 1 FROM user_programming WHERE user_id = u.user_id AND language IN ({placeholders})) OR
            EXISTS (SELECT 1 FROM user_skills WHERE user_id = u.user_id AND skill IN ({placeholders}))
        )
        ORDER BY u.xp DESC
        LIMIT 10
        '''
        
        cursor.execute(query, skills * 3)
        employees = []
        
        for row in cursor.fetchall():
            emp = dict(row)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            emp['languages'] = emp['languages'] or '–ù–µ—Ç'
            emp['programming'] = emp['programming'] or '–ù–µ—Ç'
            emp['skills'] = emp['skills'] or '–ù–µ—Ç'
            employees.append(emp)
        
        conn.close()
        return employees
    
    async def debug_get_all_users(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users')
        users = [dict(row) for row in cursor.fetchall()]
        conn.close()
        return users

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–µ—Ä—Ç–∫–∏
db = DBWrapper()

print(f"‚úÖ HR-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ: {DB_PATH}")