from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database_utils import db
from keyboards_hr import get_hr_keyboard, get_cancel_keyboard
from states_hr import SearchState  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞

router = Router()

async def is_hr_user(user_id: int):
    from config_hr import HR_WHITELIST
    return user_id in HR_WHITELIST

@router.message(Command("find"))
@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
async def cmd_find_employees(message: Message, state: FSMContext):
    if not await is_hr_user(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        return
        
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä: Python JavaScript –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SearchState.skills)

@router.message(SearchState.skills)
async def process_search_skills(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=get_hr_keyboard())
        return
        
    skills = message.text.split()
    
    if not skills:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞!\n–ü—Ä–∏–º–µ—Ä: Python JavaScript")
        return
    
    await message.answer(f"üîç –ò—â—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –Ω–∞–≤—ã–∫–∞–º–∏: {', '.join(skills)}...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        result = await db.search_employees_by_skills_simple(skills)
        
        if not result:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ç–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=get_hr_keyboard())
        else:
            await message.answer(result, reply_markup=get_hr_keyboard())
        
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}", reply_markup=get_hr_keyboard())
        await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /find —Å –Ω–∞–≤—ã–∫–∞–º–∏
@router.message(Command("find"))
async def cmd_find_with_skills(message: Message):
    if not await is_hr_user(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        return
        
    skills = message.text.split()[1:]  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ /find
    
    if not skills:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞!\n–ü—Ä–∏–º–µ—Ä: /find Python JavaScript")
        return
    
    await message.answer(f"üîç –ò—â—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –Ω–∞–≤—ã–∫–∞–º–∏: {', '.join(skills)}...")
    
    try:
        result = await db.search_employees_by_skills_simple(skills)
        
        if not result:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ç–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=get_hr_keyboard())
        else:
            await message.answer(result, reply_markup=get_hr_keyboard())
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}", reply_markup=get_hr_keyboard())