from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from states_hr import CouponState
from database_utils import db

from keyboards_hr import get_hr_keyboard, get_cancel_keyboard, get_coupons_management_keyboard

router = Router()


# ===== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–£–ü–û–ù–ê–ú–ò =====

@router.message(F.text == "üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞–º–∏")
async def manage_coupons(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞–º–∏"""
    await message.answer(
        "üé´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º–∏ –∫—É–ø–æ–Ω–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_coupons_management_keyboard()
    )


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("üîô –ù–∞–∑–∞–¥",

    reply_markup=get_hr_keyboard()
    )


@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å –∫—É–ø–æ–Ω–æ–≤")
async def coupons_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫—É–ø–æ–Ω–æ–≤"""
    try:
        coupons = await db.get_all_coupons()

        if not coupons:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤")
            return

        response = "üìä <b>–°—Ç–∞—Ç—É—Å –∫—É–ø–æ–Ω–æ–≤:</b>\n\n"

        for coupon in coupons:
            status_emoji = "üü¢" if coupon['remaining_quantity'] > 10 else "üü°" if coupon['remaining_quantity'] > 0 else "üî¥"
            percent = (coupon['remaining_quantity'] / coupon['total_quantity']) * 100 if coupon['total_quantity'] > 0 else 0
            response += f"{status_emoji} <b>{coupon['partner_name']}</b> - {coupon['coupon_name']}\n"
            response += f"   –û—Å—Ç–∞–ª–æ—Å—å: {coupon['remaining_quantity']}/{coupon['total_quantity']} ({percent:.1f}%)\n\n"

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤")
async def coupons_list(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤"""
    try:
        coupons = await db.get_all_coupons()

        if not coupons:
            await message.answer("‚ùå –ù–µ—Ç –∫—É–ø–æ–Ω–æ–≤ –≤ –±–∞–∑–µ")
            return

        response = "üìã <b>–í—Å–µ –∫—É–ø–æ–Ω—ã:</b>\n\n"

        for coupon in coupons:
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if coupon['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            response += f"ID: {coupon['id']}\n"
            response += f"üè™ <b>{coupon['partner_name']}</b> - {coupon['coupon_name']}\n"
            response += f"üìù {coupon['description']}\n"
            response += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {coupon['xp_cost']} XP\n"
            response += f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å: {coupon['remaining_quantity']}/{coupon['total_quantity']}\n"
            response += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            response += "‚îÄ" * 30 + "\n\n"

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω—ã")
async def add_coupons_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫—É–ø–æ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>5 10</code> - –¥–æ–±–∞–≤–∏—Ç—å 10 –∫—É–ø–æ–Ω–æ–≤ –∫ ID 5\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è!\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CouponState.add_quantity)


@router.message(CouponState.add_quantity, F.text)
async def add_coupons_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_coupons_management_keyboard())
        return

    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        coupon_id = int(parts[0])
        quantity = int(parts[1])

        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–ø–æ–Ω–∞
        coupon = await db.get_coupon(coupon_id)
        if not coupon:
            await message.answer("‚ùå –ö—É–ø–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
        new_quantity = coupon['remaining_quantity'] + quantity
        if new_quantity > coupon['total_quantity']:
            await message.answer(
                f"‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ {coupon['total_quantity'] - coupon['remaining_quantity']} –∫—É–ø–æ–Ω–æ–≤\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {coupon['total_quantity']}"
            )
            return

        result = await db.increase_coupon_quantity(coupon_id, quantity)

        if not result:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–æ–≤")
            return

        coupon = await db.get_coupon(coupon_id)

        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {quantity} –∫—É–ø–æ–Ω–æ–≤\n"
            f"üè™ {coupon['partner_name']} - {coupon['coupon_name']}\n"
            f"üì¶ –¢–µ–ø–µ—Ä—å: {result['remaining_quantity']}/{coupon['total_quantity']}\n"
            f"üìä –ú–∞–∫—Å–∏–º—É–º: {coupon['total_quantity']}",
            reply_markup=get_coupons_management_keyboard()
        )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>5 10</code>", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –∫—É–ø–æ–Ω—ã")
async def decrease_coupons_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫—É–ø–æ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>5 5</code> - —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 5 –∫—É–ø–æ–Ω–æ–≤ ID 5\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º!\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CouponState.decrease_quantity)


@router.message(CouponState.decrease_quantity, F.text)
async def decrease_coupons_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_coupons_management_keyboard())
        return

    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        coupon_id = int(parts[0])
        quantity = int(parts[1])

        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        result = await db.decrease_coupon_quantity(coupon_id, quantity)

        if not result:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É–ø–æ–Ω–æ–≤ –∏–ª–∏ –∫—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        coupon = await db.get_coupon(coupon_id)

        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ {quantity} –∫—É–ø–æ–Ω–æ–≤\n"
            f"üè™ {coupon['partner_name']} - {coupon['coupon_name']}\n"
            f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å: {result['remaining_quantity']}/{coupon['total_quantity']}\n"
            f"üìä –ú–∞–∫—Å–∏–º—É–º: {coupon['total_quantity']}",
            reply_markup=get_coupons_management_keyboard()
        )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>5 5</code>", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("set_coupon"))
async def set_coupon_command(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–æ–Ω–æ–≤"""
    text = message.text.split()
    if len(text) != 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_coupon <id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
            "–ü—Ä–∏–º–µ—Ä: /set_coupon 5 25 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 25 –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è ID 5\n"
            "–ù–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!"
        )
        return

    try:
        coupon_id = int(text[1])
        quantity = int(text[2])

        if quantity < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return

        result = await db.set_coupon_quantity(coupon_id, quantity)

        if not result:
            await message.answer("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        coupon = await db.get_coupon(coupon_id)

        await message.answer(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"üè™ {coupon['partner_name']} - {coupon['coupon_name']}\n"
            f"üì¶ –¢–µ–ø–µ—Ä—å: {result['remaining_quantity']}/{coupon['total_quantity']}\n"
            f"üìä –ú–∞–∫—Å–∏–º—É–º: {coupon['total_quantity']}",
            reply_markup=get_coupons_management_keyboard()
        )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω")
async def create_coupon_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞"""
    await message.answer(
        "üé´ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: OZON, DNS, –õ–∏—Ç–†–µ—Å):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CouponState.create_coupon_partner)


@router.message(CouponState.create_coupon_partner, F.text)
async def process_coupon_partner(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_coupons_management_keyboard())
        return

    await state.update_data(partner_name=message.text)

    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 500‚ÇΩ):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CouponState.create_coupon_name)


@router.message(CouponState.create_coupon_name, F.text)
async def process_coupon_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_coupons_management_keyboard())
        return

    await state.update_data(coupon_name=message.text)

    await message.answer(
        "üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CouponState.create_coupon_description)


@router.message(CouponState.create_coupon_description, F.text)
async def process_coupon_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_coupons_management_keyboard())
        return

    await state.update_data(description=message.text)

    await message.answer(
        "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –≤ XP:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CouponState.create_coupon_xp_cost)


@router.message(CouponState.create_coupon_xp_cost, F.text)
async def process_coupon_xp_cost(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É–ø–æ–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_coupons_management_keyboard())
        return

    try:
        xp_cost = int(message.text)
        if xp_cost <= 0:
            await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            return

        await state.update_data(xp_cost=xp_cost)

        await message.answer(
            "üì¶ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–æ–Ω–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100):",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(CouponState.create_coupon_quantity)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(CouponState.create_coupon_quantity, F.text)
async def process_coupon_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–æ–Ω–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_coupons_management_keyboard())
        return

    data = await state.get_data()

    try:
        quantity = int(message.text) if message.text.strip() else 100
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            return

        # –°–æ–∑–¥–∞–µ–º –∫—É–ø–æ–Ω
        coupon_id, error = await db.create_coupon(
            data['partner_name'],
            data['coupon_name'],
            data['description'],
            data['xp_cost'],
            quantity
        )

        if error:
            await message.answer(f"‚ùå {error}", reply_markup=get_coupons_management_keyboard())
            await state.clear()
            return

        await message.answer(
            f"‚úÖ <b>–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üè™ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {data['partner_name']}\n"
            f"üé´ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['coupon_name']}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {data['xp_cost']} XP\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}\n"
            f"üÜî <b>ID –∫—É–ø–æ–Ω–∞:</b> {coupon_id}",
            parse_mode="HTML",
            reply_markup=get_coupons_management_keyboard()
        )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫—É–ø–æ–Ω")
async def delete_coupon_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞"""
    await message.answer(
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∫—É–ø–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CouponState.delete_coupon)


@router.message(CouponState.delete_coupon, F.text)
async def process_delete_coupon(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_coupons_management_keyboard())
        return

    try:
        coupon_id = int(message.text)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–æ–Ω–µ
        coupon = await db.get_coupon(coupon_id)
        if not coupon:
            await message.answer("‚ùå –ö—É–ø–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_coupons_management_keyboard())
            await state.clear()
            return

        # –£–¥–∞–ª—è–µ–º –∫—É–ø–æ–Ω
        success, error = await db.delete_coupon(coupon_id)

        if error:
            await message.answer(f"‚ùå {error}", reply_markup=get_coupons_management_keyboard())
        else:
            await message.answer(
                f"‚úÖ <b>–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üè™ {coupon['partner_name']} - {coupon['coupon_name']}\n"
                f"üÜî ID: {coupon_id}",
                parse_mode="HTML",
                reply_markup=get_coupons_management_keyboard()
            )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫—É–ø–æ–Ω–∞")