
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database_utils import db
from states_hr import VacancyState
from keyboards_hr import get_hr_keyboard, get_cancel_keyboard

from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
import asyncio
router = Router()

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –ü–ï–†–í–û–ì–û –ë–û–¢–ê =====
BOT_TOKEN_MAIN = "8464487214:AAEI2IR5kmOauF_JCsYngPo_gVy-ldBXPA4"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞

async def is_hr_user(user_id: int):
    from config_hr import HR_WHITELIST
    return user_id in HR_WHITELIST

bot = Bot(token=BOT_TOKEN_MAIN)
async def notify_matching_employees(vacancy_name: str,vacancy_id: str, user_ids: list[int]) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

    Args:
        vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏.
        user_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram.

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """

    user_ids = list(set(user_ids))
    notified_count = 0
    for user_id in user_ids:
        try:
            message_text = (
                f"üéâ *–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!* üéâ\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                f"–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏–π –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç!\n\n"
                f"üíº *–í–∞–∫–∞–Ω—Å–∏—è:* {vacancy_name} ID:{vacancy_id}\n\n"  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–∂–∏—Ä–Ω—ã–º)
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ <üíº –í–∞–∫–∞–Ω—Å–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏> ")

            try:
                await bot.send_message(chat_id=user_id, text=message_text)  # user_id —Ç—É—Ç - —ç—Ç–æ telegram ID.
                notified_count += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

            except TelegramForbiddenError:
                print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–æ—Ç.")
            except TelegramBadRequest as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            except Exception as e:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    return notified_count

@router.message(Command("add_vacancy"))
@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def cmd_add_vacancy(message: Message, state: FSMContext):
    if not await is_hr_user(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        return
        
    await message.answer(
        "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏:\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(VacancyState.title)

@router.message(VacancyState.title)
async def process_vacancy_title(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_hr_keyboard())
        return
        
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
    await state.set_state(VacancyState.description)

@router.message(VacancyState.description)  
async def process_vacancy_description(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_hr_keyboard())
        return
        
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä: Python Django SQL English")
    await state.set_state(VacancyState.skills)

@router.message(VacancyState.skills)
async def process_vacancy_skills(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_hr_keyboard())
        return
        
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –ë–î
    vacancy_id = await db.add_vacancy(
        title=data['title'],
        description=data['description'],
        required_skills=message.text,
        created_by=message.from_user.id
    )

    vacancy_name = data["title"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    success_message = (
        f"‚úÖ *–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n"
        f"üìù *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {data['title']}\n"
        f"üîß *–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏:* {message.text}\n"
        f"üÜî *ID –≤–∞–∫–∞–Ω—Å–∏–∏:* {vacancy_id}"
    )
    
    await message.answer(success_message, parse_mode="Markdown", reply_markup=get_hr_keyboard())
    await state.clear()
    
    # # ===== –¢–û–ß–ù–û –¢–ê–ö–ê–Ø –ñ–ï –ü–†–û–í–ï–†–ö–ê –ö–ê–ö –í SEARCH.PY =====
    # skills = message.text.split()

    # await message.answer(f"üîç –ò—â—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –Ω–∞–≤—ã–∫–∞–º–∏: {', '.join(skills)}...")

    # try:
    #     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ (—Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ search.py)
    #     user_ids = await db.search_employees_by_skills_simple2(skills)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id

    #     if not user_ids:
    #         search_result_message = "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ç–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    #     else:
    #         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
    #         search_result_message = "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã"
    #         print(map(str, user_ids));

    #     await message.answer(search_result_message, reply_markup=get_hr_keyboard())

    # except Exception as e:
    #     await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}", reply_markup=get_hr_keyboard())

    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    # notified_count = await notify_matching_employees(vacancy_name, vacancy_id, user_ids) #
    
    # if notified_count > 0:
    #     await message.answer(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notified_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
    # else:
    #     await message.answer("‚ÑπÔ∏è –ù–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

@router.message(Command("vacancies"))
@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
async def cmd_list_vacancies(message: Message):
    if not await is_hr_user(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        return
        
    vacancies = await db.get_vacancies()
    
    if not vacancies:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
        return
        
    response = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*\n\n"
    
    for vacancy in vacancies:
        response += f"üÜî *ID:* {vacancy['id']}\n"
        response += f"üìù *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {vacancy['title']}\n"
        response += f"üîß *–ù–∞–≤—ã–∫–∏:* {vacancy['required_skills']}\n"
        response += f"üìÖ *–î–∞—Ç–∞:* {vacancy['created_at']}\n"
        response += "‚îÄ" * 30 + "\n"
    
    await message.answer(response, parse_mode="Markdown")

@router.message(Command("close_vacancy"))
async def cmd_close_vacancy(message: Message):
    if not await is_hr_user(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        return
        
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /close_vacancy 123
    try:
        vacancy_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–∞–∫–∞–Ω—Å–∏–∏: /close_vacancy 123")
        return
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
    await db.close_vacancy(vacancy_id)
    await message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è #{vacancy_id} –∑–∞–∫—Ä—ã—Ç–∞")
