from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from database_utils import db
from keyboards_hr import get_hr_keyboard

router = Router()

async def is_hr_user(user_id: int):
    from config_hr import HR_WHITELIST
    return user_id in HR_WHITELIST

@router.message(Command("stats"))
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: Message):
    if not await is_hr_user(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        return
        
    try:
        total_registered = await db.get_users_count()
        total_with_names = await db.get_users_with_names_count()
        active_users = await db.get_active_users_count()
        total_skills = await db.get_total_skills_count()
        vacancies = await db.get_vacancies()
        total_vacancies = len(vacancies)
        
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"
            f"‚Ä¢ üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_registered}\n"
            f"‚Ä¢ üìù –° –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏: {total_with_names}\n"
            f"‚Ä¢ ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            f"‚Ä¢ üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {total_vacancies}\n"
            f"‚Ä¢ üîß –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {total_skills}\n\n"
        )
        
        if total_registered > 0:
            completion_rate = (total_with_names / total_registered) * 100
            response += f"‚Ä¢ üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π: {completion_rate:.1f}%\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if total_with_names > 0:
            all_users = await db.get_all_users()
            response += "üèÜ –¢–æ–ø-3 –ø–æ –æ–ø—ã—Ç—É:\n"
            for i, user in enumerate(all_users[:3], 1):
                response += f"  {i}. {user['name']} - {user['xp']} XP\n"
        
        await message.answer(response, reply_markup=get_hr_keyboard())
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.message(Command("debug_users"))
async def cmd_debug_users(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await is_hr_user(message.from_user.id):
        return
        
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        all_users = await db.debug_get_all_users()
        
        response = f"üêõ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ ({len(all_users)}):\n\n"
        
        for user in all_users:
            status = "‚úÖ" if user['name'] else "‚ùå"
            response += f"{status} ID: {user['user_id']}, Name: {user['name']}, XP: {user['xp']}\n"
            if len(response) > 3500:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                response += "... (–∏ –µ—â–µ)"
                break
        
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")