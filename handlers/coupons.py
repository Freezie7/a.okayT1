from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import logging
import sys
import os
from database import db
from keyboards.main_kb import get_main_keyboard

router = Router()
logger = logging.getLogger(__name__)


# ===== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ö–£–ü–û–ù–û–í =====

@router.message(Command("coupons"))
async def cmd_coupons(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É–ø–æ–Ω—ã"""
    await show_available_coupons(message)


@router.message(F.text == "üéÅ –ú–∞–≥–∞–∑–∏–Ω –∫—É–ø–æ–Ω–æ–≤")
async def coupons_shop_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –∫—É–ø–æ–Ω–æ–≤"""
    await show_available_coupons(message)


async def show_available_coupons(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É–ø–æ–Ω—ã"""
    try:
        coupons = await db.get_available_coupons()

        if not coupons:
            await message.answer(
                "üéÅ <b>–ú–∞–≥–∞–∑–∏–Ω –∫—É–ø–æ–Ω–æ–≤</b>\n\n"
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_xp = await db.get_user_xp(message.from_user.id)
        if user_xp is None:
            user_xp = 0

        response = f"üéÅ <b>–ú–∞–≥–∞–∑–∏–Ω –∫—É–ø–æ–Ω–æ–≤</b>\n\n"
        response += f"‚≠ê <b>–í–∞—à XP:</b> {user_xp}\n\n"
        response += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É–ø–æ–Ω—ã:</b>\n\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É–ø–æ–Ω—ã –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º
        partners = {}
        for coupon in coupons:
            if coupon['partner'] not in partners:
                partners[coupon['partner']] = []
            partners[coupon['partner']].append(coupon)

        for partner, partner_coupons in partners.items():
            response += f"üè™ <b>{partner}</b>\n"

            for coupon in partner_coupons:
                status = "üü¢" if user_xp >= coupon['xp_cost'] else "üî¥"
                response += f"{status} <b>{coupon['name']}</b> - {coupon['xp_cost']} XP\n"
                response += f"   {coupon['description']}\n"
                response += f"   –û—Å—Ç–∞–ª–æ—Å—å: {coupon['remaining']} —à—Ç.\n\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP
                if user_xp >= coupon['xp_cost']:
                    keyboard.inline_keyboard.append([
                        InlineKeyboardButton(
                            text=f"üé´ –ö—É–ø–∏—Ç—å {coupon['name']} - {coupon['xp_cost']} XP",
                            callback_data=f"buy_coupon_{coupon['id']}"
                        )
                    ])

        response += "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–æ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∫—É–ø–æ–Ω–æ–≤
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="üìã –ú–æ–∏ –∫—É–ø–æ–Ω—ã",
                callback_data="my_coupons"
            )
        ])

        await message.answer(response, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error in show_available_coupons: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É–ø–æ–Ω–æ–≤.")


@router.callback_query(F.data.startswith("buy_coupon_"))
async def process_buy_coupon(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∫—É–ø–æ–Ω–∞"""
    try:
        logger.info(f"Processing coupon purchase: {callback.data}")

        coupon_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É...")

        # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
        result, error = await db.purchase_coupon(user_id, coupon_id)

        if error:
            await callback.message.answer(f"‚ùå {error}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–æ–Ω–µ
        coupons = await db.get_available_coupons()
        purchased_coupon = next((c for c in coupons if c['id'] == coupon_id), None)

        if purchased_coupon:
            response = f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!</b>\n\n"
            response += f"üè™ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {purchased_coupon['partner']}\n"
            response += f"üé´ <b>–ö—É–ø–æ–Ω:</b> {purchased_coupon['name']}\n"
            response += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {purchased_coupon['description']}\n"
            response += f"üí∏ <b>–°–ø–∏—Å–∞–Ω–æ XP:</b> {result['xp_cost']}\n"
            response += f"‚≠ê <b>–û—Å—Ç–∞–ª–æ—Å—å XP:</b> {result['remaining_xp']}\n\n"
            response += "üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ HR-–æ—Ç–¥–µ–ª"

            await callback.message.answer(response, parse_mode="HTML")

        await callback.answer("‚úÖ –ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!")

    except Exception as e:
        logger.error(f"Error in process_buy_coupon: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—É–ø–æ–Ω–∞.")


@router.callback_query(F.data == "my_coupons")
async def show_my_coupons(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ø–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        coupons = await db.get_user_coupons(user_id)

        if not coupons:
            await callback.message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–æ–Ω–æ–≤ üò¢\n"
                "–ü–æ—Å–µ—Ç–∏—Ç–µ üéÅ –ú–∞–≥–∞–∑–∏–Ω –∫—É–ø–æ–Ω–æ–≤ —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–π –∫—É–ø–æ–Ω!",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        response = "üìã <b>–í–∞—à–∏ –∫—É–ø–æ–Ω—ã:</b>\n\n"

        for coupon in coupons:
            status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if coupon['is_used'] else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
            response += f"üè™ <b>{coupon['partner']}</b>\n"
            response += f"üé´ <b>{coupon['name']}</b>\n"
            response += f"üìù {coupon['description']}\n"
            response += f"üìÖ –ü–æ–ª—É—á–µ–Ω: {coupon['purchase_date'][:10]}\n"
            response += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"

            if coupon['is_used'] and coupon['used_date']:
                response += f"üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {coupon['used_date'][:10]}\n"

            response += "‚îÄ" * 30 + "\n\n"

        response += "üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ HR-–æ—Ç–¥–µ–ª"

        await callback.message.answer(response, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in show_my_coupons: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∫—É–ø–æ–Ω–æ–≤.")
        await callback.answer()


# ===== –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –°–í–û–ò–• –ö–£–ü–û–ù–û–í =====

@router.message(Command("my_coupons"))
async def cmd_my_coupons(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ø–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        coupons = await db.get_user_coupons(user_id)

        if not coupons:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–æ–Ω–æ–≤ üò¢\n"
                "–ü–æ—Å–µ—Ç–∏—Ç–µ üéÅ –ú–∞–≥–∞–∑–∏–Ω –∫—É–ø–æ–Ω–æ–≤ —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–π –∫—É–ø–æ–Ω!",
                parse_mode="HTML"
            )
            return

        response = "üìã <b>–í–∞—à–∏ –∫—É–ø–æ–Ω—ã:</b>\n\n"

        for coupon in coupons:
            status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if coupon['is_used'] else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
            response += f"üè™ <b>{coupon['partner']}</b>\n"
            response += f"üé´ <b>{coupon['name']}</b>\n"
            response += f"üìù {coupon['description']}\n"
            response += f"üìÖ –ü–æ–ª—É—á–µ–Ω: {coupon['purchase_date'][:10]}\n"
            response += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"

            if coupon['is_used'] and coupon['used_date']:
                response += f"üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {coupon['used_date'][:10]}\n"

            response += "‚îÄ" * 30 + "\n\n"

        response += "üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ HR-–æ—Ç–¥–µ–ª"

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error in cmd_my_coupons: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∫—É–ø–æ–Ω–æ–≤.")