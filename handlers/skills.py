from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from states.profile_st import ProfileState
from database import db
from keyboards.profile_kb import (get_skills_type_keyboard, get_level_keyboard,
                                 get_popular_languages_keyboard, get_popular_programming_keyboard,
                                 get_popular_skills_keyboard)
from keyboards.main_kb import get_main_keyboard
from config import BADGES

router = Router()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

async def check_and_award_badges(user_id: int, skill_type: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –±–µ–π–¥–∂–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–≤—ã–∫–æ–≤"""
    badges_awarded = []
    
    user_stats = await db.get_user_stats(user_id)
    user_badges = await db.get_user_badges(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–µ–π–¥–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if skill_type == "foreign_language":
        languages_count = user_stats['languages_count']
        
        if languages_count == 1 and "language_added" not in user_badges:
            if await db.add_badge_to_user(user_id, "language_added"):
                badges_awarded.append("language_added")
        elif languages_count == 3 and "polyglot_bronze" not in user_badges:
            if await db.add_badge_to_user(user_id, "polyglot_bronze"):
                badges_awarded.append("polyglot_bronze")
        elif languages_count == 5 and "polyglot_silver" not in user_badges:
            if await db.add_badge_to_user(user_id, "polyglot_silver"):
                badges_awarded.append("polyglot_silver")
        elif languages_count >= 10 and "polyglot_gold" not in user_badges:
            if await db.add_badge_to_user(user_id, "polyglot_gold"):
                badges_awarded.append("polyglot_gold")
    
    elif skill_type == "programming":
        programming_count = user_stats['programming_count']
        
        if programming_count == 1 and "programming_added" not in user_badges:
            if await db.add_badge_to_user(user_id, "programming_added"):
                badges_awarded.append("programming_added")
        elif programming_count == 3 and "coder_bronze" not in user_badges:
            if await db.add_badge_to_user(user_id, "coder_bronze"):
                badges_awarded.append("coder_bronze")
        elif programming_count == 5 and "coder_silver" not in user_badges:
            if await db.add_badge_to_user(user_id, "coder_silver"):
                badges_awarded.append("coder_silver")
        elif programming_count >= 10 and "coder_gold" not in user_badges:
            if await db.add_badge_to_user(user_id, "coder_gold"):
                badges_awarded.append("coder_gold")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –±–µ–π–¥–∂–µ–π
    total_skills = user_stats['total_skills']
    
    if total_skills >= 5 and "skill_master" not in user_badges:
        if await db.add_badge_to_user(user_id, "skill_master"):
            badges_awarded.append("skill_master")
    
    if total_skills >= 10 and "skill_guru" not in user_badges:
        if await db.add_badge_to_user(user_id, "skill_guru"):
            badges_awarded.append("skill_guru")
    
    if total_skills >= 20 and "skill_legend" not in user_badges:
        if await db.add_badge_to_user(user_id, "skill_legend"):
            badges_awarded.append("skill_legend")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–π–¥–∂–∏ –∑–∞ –æ–ø—ã—Ç
    xp = user_stats['xp']
    
    if xp >= 100 and "xp_100" not in user_badges:
        if await db.add_badge_to_user(user_id, "xp_100"):
            badges_awarded.append("xp_100")
    
    if xp >= 500 and "xp_500" not in user_badges:
        if await db.add_badge_to_user(user_id, "xp_500"):
            badges_awarded.append("xp_500")
    
    if xp >= 1000 and "xp_1000" not in user_badges:
        if await db.add_badge_to_user(user_id, "xp_1000"):
            badges_awarded.append("xp_1000")
    
    if xp >= 5000 and "xp_5000" not in user_badges:
        if await db.add_badge_to_user(user_id, "xp_5000"):
            badges_awarded.append("xp_5000")
    
    return badges_awarded

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ò–ù–û–°–¢–†–ê–ù–ù–´–• –Ø–ó–´–ö–û–í =====

@router.message(Command("skills"))
async def cmd_skills(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîß <b>–ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤!</b>\n\n"
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=get_skills_type_keyboard()
    )
    await state.set_state(ProfileState.choosing_skill_type)

@router.message(ProfileState.choosing_skill_type, F.text == "üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏")
async def choose_foreign_language(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏:",
        reply_markup=get_popular_languages_keyboard()
    )
    await state.set_state(ProfileState.foreign_language)

@router.callback_query(F.data.startswith("lang_"))
async def process_language_selection(callback: CallbackQuery, state: FSMContext):
    language_map = {
        "lang_english": "English", "lang_german": "Deutsch", "lang_french": "Fran√ßais",
        "lang_spanish": "Espa√±ol", "lang_italian": "Italiano", "lang_portuguese": "Portugu√™s",
        "lang_chinese": "‰∏≠Êñá", "lang_japanese": "Êó•Êú¨Ë™û", "lang_korean": "ÌïúÍµ≠Ïñ¥",
        "lang_russian": "–†—É—Å—Å–∫–∏–π", "lang_arabic": "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", "lang_hindi": "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä"
    }
    
    if callback.data == "lang_other":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞:")
        await state.set_state(ProfileState.foreign_language)
    else:
        language = language_map[callback.data]
        await state.update_data(language=language)
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: <b>{language}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_level_keyboard()
        )
        await state.set_state(ProfileState.foreign_language_level)
    await callback.answer()

@router.message(ProfileState.foreign_language, F.text)
async def process_custom_language(message: Message, state: FSMContext):
    await state.update_data(language=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è <b>{message.text}</b>:",
        parse_mode="HTML",
        reply_markup=get_level_keyboard()
    )
    await state.set_state(ProfileState.foreign_language_level)

@router.message(ProfileState.foreign_language_level, F.text)
async def process_language_level(message: Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    level = message.text
    
    if not language:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞: /skills")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    added = await db.add_user_language(message.from_user.id, language, level)
    
    if not added:
        await message.answer(
            f"‚ùå –Ø–∑—ã–∫ <b>{language}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!\n"
            "–ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.",
            parse_mode="HTML",
            reply_markup=get_skills_type_keyboard()
        )
        await state.set_state(ProfileState.choosing_skill_type)
        return
    
    await db.add_xp_to_user(message.from_user.id, 15)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –±–µ–π–¥–∂–∏
    badges_awarded = await check_and_award_badges(message.from_user.id, "foreign_language")
    
    success_message = f"üåç <b>–î–æ–±–∞–≤–ª–µ–Ω —è–∑—ã–∫:</b> {language} ({level})\n+15 XP!\n"
    
    if badges_awarded:
        success_message += "üéâ –ü–æ–ª—É—á–µ–Ω—ã –±–µ–π–¥–∂–∏:\n"
        for badge in badges_awarded:
            badge_info = BADGES.get(badge, {})
            success_message += f"‚Ä¢ {badge_info.get('name', badge)}\n"
        success_message += "\n"
    
    success_message += "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–≤—ã–∫–∏?"
    
    await message.answer(success_message, parse_mode="HTML", reply_markup=get_skills_type_keyboard())
    await state.set_state(ProfileState.choosing_skill_type)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –Ø–ó–´–ö–û–í –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø =====

@router.message(ProfileState.choosing_skill_type, F.text == "üíª –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
async def choose_programming_language(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_popular_programming_keyboard()
    )
    await state.set_state(ProfileState.programming_language)

@router.callback_query(F.data.startswith("prog_"))
async def process_programming_selection(callback: CallbackQuery, state: FSMContext):
    programming_map = {
        "prog_python": "Python", "prog_js": "JavaScript", "prog_java": "Java",
        "prog_cpp": "C++", "prog_csharp": "C#", "prog_php": "PHP",
        "prog_go": "Go", "prog_ruby": "Ruby", "prog_swift": "Swift",
        "prog_kotlin": "Kotlin", "prog_ts": "TypeScript", "prog_rust": "Rust",
        "prog_sql": "SQL", "prog_html": "HTML/CSS", "prog_dart": "Dart"
    }
    
    if callback.data == "prog_other":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await state.set_state(ProfileState.programming_language)
    else:
        language = programming_map[callback.data]
        await state.update_data(programming_language=language)
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: <b>{language}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_level_keyboard()
        )
        await state.set_state(ProfileState.programming_language_level)
    await callback.answer()

@router.message(ProfileState.programming_language, F.text)
async def process_custom_programming(message: Message, state: FSMContext):
    await state.update_data(programming_language=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è <b>{message.text}</b>:",
        parse_mode="HTML",
        reply_markup=get_level_keyboard()
    )
    await state.set_state(ProfileState.programming_language_level)

@router.message(ProfileState.programming_language_level, F.text)
async def process_programming_level(message: Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('programming_language')
    level = message.text
    
    if not language:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞: /skills")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    added = await db.add_user_programming(message.from_user.id, language, level)
    
    if not added:
        await message.answer(
            f"‚ùå –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è <b>{language}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!\n"
            "–ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.",
            parse_mode="HTML",
            reply_markup=get_skills_type_keyboard()
        )
        await state.set_state(ProfileState.choosing_skill_type)
        return
    
    await db.add_xp_to_user(message.from_user.id, 15)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –±–µ–π–¥–∂–∏
    badges_awarded = await check_and_award_badges(message.from_user.id, "programming")
    
    success_message = f"üíª <b>–î–æ–±–∞–≤–ª–µ–Ω —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {language} ({level})\n+15 XP!\n"
    
    if badges_awarded:
        success_message += "üéâ –ü–æ–ª—É—á–µ–Ω—ã –±–µ–π–¥–∂–∏:\n"
        for badge in badges_awarded:
            badge_info = BADGES.get(badge, {})
            success_message += f"‚Ä¢ {badge_info.get('name', badge)}\n"
        success_message += "\n"
    
    success_message += "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–≤—ã–∫–∏?"
    
    await message.answer(success_message, parse_mode="HTML", reply_markup=get_skills_type_keyboard())
    await state.set_state(ProfileState.choosing_skill_type)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –î–†–£–ì–ò–• –ù–ê–í–´–ö–û–í =====

@router.message(ProfileState.choosing_skill_type, F.text == "üîß –î—Ä—É–≥–∏–µ –Ω–∞–≤—ã–∫–∏")
async def choose_other_skills(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:",
        reply_markup=get_popular_skills_keyboard()
    )
    await state.set_state(ProfileState.other_skill)

@router.callback_query(F.data.startswith("skill_"))
async def process_skill_selection(callback: CallbackQuery, state: FSMContext):
    skills_map = {
        "skill_leadership": "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", "skill_communication": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
        "skill_design": "–î–∏–∑–∞–π–Ω", "skill_analysis": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "skill_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", "skill_marketing": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
        "skill_sales": "–ü—Ä–æ–¥–∞–∂–∏", "skill_creativity": "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "skill_teamwork": "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "skill_problem_solving": "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"
    }
    
    if callback.data == "skill_other":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞:")
        await state.set_state(ProfileState.other_skill)
    else:
        skill = skills_map[callback.data]
        await state.update_data(skill=skill)
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω –Ω–∞–≤—ã–∫: <b>{skill}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_level_keyboard()
        )
        await state.set_state(ProfileState.other_skill_level)
    await callback.answer()

@router.message(ProfileState.other_skill, F.text)
async def process_custom_skill(message: Message, state: FSMContext):
    await state.update_data(skill=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è <b>{message.text}</b>:",
        parse_mode="HTML",
        reply_markup=get_level_keyboard()
    )
    await state.set_state(ProfileState.other_skill_level)

@router.message(ProfileState.other_skill_level, F.text)
async def process_skill_level(message: Message, state: FSMContext):
    data = await state.get_data()
    skill = data.get('skill')
    level = message.text
    
    if not skill:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞: /skills")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    added = await db.add_user_skill(message.from_user.id, skill, level)
    
    if not added:
        await message.answer(
            f"‚ùå –ù–∞–≤—ã–∫ <b>{skill}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!\n"
            "–ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –Ω–∞–≤—ã–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.",
            parse_mode="HTML",
            reply_markup=get_skills_type_keyboard()
        )
        await state.set_state(ProfileState.choosing_skill_type)
        return
    
    await db.add_xp_to_user(message.from_user.id, 15)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –±–µ–π–¥–∂–∏
    badges_awarded = await check_and_award_badges(message.from_user.id, "other")
    
    success_message = f"üîß <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–∞–≤—ã–∫:</b> {skill} ({level})\n+15 XP!\n"
    
    if badges_awarded:
        success_message += "üéâ –ü–æ–ª—É—á–µ–Ω—ã –±–µ–π–¥–∂–∏:\n"
        for badge in badges_awarded:
            badge_info = BADGES.get(badge, {})
            success_message += f"‚Ä¢ {badge_info.get('name', badge)}\n"
        success_message += "\n"
    
    success_message += "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–≤—ã–∫–∏?"
    
    await message.answer(success_message, parse_mode="HTML", reply_markup=get_skills_type_keyboard())
    await state.set_state(ProfileState.choosing_skill_type)

# ===== –†–ï–î–ê–ö–¢ –£–†–û–í–ù–Ø –ù–ê–í–´–ö–û–í =====
@router.message(Command("my_skills"))
async def cmd_my_skills(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    
    languages = await db.get_user_languages(user_id)
    programming = await db.get_user_programming(user_id)
    skills = await db.get_user_skills(user_id)
    
    if not languages and not programming and not skills:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ /skills")
        return
    
    skills_text = "üìä <b>–¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏:</b>\n\n"
    
    if languages:
        skills_text += "üåç <b>–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏:</b>\n"
        for lang in languages:
            skills_text += f"‚Ä¢ {lang['language']} ({lang['level']})\n"
        skills_text += "\n"
    
    if programming:
        skills_text += "üíª <b>–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        for prog in programming:
            skills_text += f"‚Ä¢ {prog['language']} ({prog['level']})\n"
        skills_text += "\n"
    
    if skills:
        skills_text += "üîß <b>–î—Ä—É–≥–∏–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
        for skill in skills:
            skills_text += f"‚Ä¢ {skill['skill']} ({skill['level']})\n"
    
    skills_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π /skills —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏!"
    
    await message.answer(skills_text, parse_mode="HTML")

# ===== –û–ë–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

@router.message(ProfileState.choosing_skill_type, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
async def finish_skills(message: Message, state: FSMContext):
    await message.answer(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /myprofile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

@router.message(StateFilter(ProfileState))
async def process_unknown_message_in_skills(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å üôÇ\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /cancel —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤"
    )

@router.message(Command("cancel"))
async def cmd_cancel_skills(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–æ.\n–¢–≤–æ–∏ —É–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        reply_markup=get_main_keyboard()
    )