from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from states.profile_st import ProfileState
from database import db
from keyboards.profile_kb import (get_skills_type_keyboard, get_level_keyboard,
                                 get_popular_languages_keyboard, get_popular_programming_keyboard,
                                 get_popular_skills_keyboard)
from keyboards.main_kb import get_main_keyboard

router = Router()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ò–ù–û–°–¢–†–ê–ù–ù–´–• –Ø–ó–´–ö–û–í =====

@router.message(Command("skills"))
async def cmd_skills(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîß <b>–ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤!</b>\n\n"
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=get_skills_type_keyboard()
    )
    await state.set_state(ProfileState.choosing_skill_type)

@router.message(ProfileState.choosing_skill_type, F.text == "üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏")
async def choose_foreign_language(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏:",
        reply_markup=get_popular_languages_keyboard()
    )
    await state.set_state(ProfileState.foreign_language)

@router.callback_query(F.data.startswith("lang_"))
async def process_language_selection(callback: CallbackQuery, state: FSMContext):
    language_map = {
        "lang_english": "English", "lang_german": "Deutsch", 
        "lang_spanish": "Espa√±ol", "lang_french": "Fran√ßais",
        "lang_chinese": "‰∏≠Êñá", "lang_japanese": "Êó•Êú¨Ë™û"
    }
    
    if callback.data == "lang_other":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞:")
        await state.set_state(ProfileState.foreign_language)
    else:
        language = language_map[callback.data]
        await state.update_data(language=language)
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: <b>{language}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_level_keyboard()
        )
        await state.set_state(ProfileState.foreign_language_level)
    await callback.answer()

@router.message(ProfileState.foreign_language, F.text)
async def process_custom_language(message: Message, state: FSMContext):
    await state.update_data(language=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è <b>{message.text}</b>:",
        parse_mode="HTML",
        reply_markup=get_level_keyboard()
    )
    await state.set_state(ProfileState.foreign_language_level)

@router.message(ProfileState.foreign_language_level, F.text)
async def process_language_level(message: Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    level = message.text
    
    if not language:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞: /skills")
        await state.clear()
        return
    
    await db.add_user_language(message.from_user.id, language, level)
    await db.add_xp_to_user(message.from_user.id, 15)
    
    badge_awarded = await db.add_badge_to_user(message.from_user.id, "language_added")
    
    success_message = f"üåç <b>–î–æ–±–∞–≤–ª–µ–Ω —è–∑—ã–∫:</b> {language} ({level})\n+15 XP!\n"
    if badge_awarded: success_message += "üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ '–ü–æ–ª–∏–≥–ª–æ—Ç'!\n\n"
    success_message += "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–≤—ã–∫–∏?"
    
    await message.answer(success_message, parse_mode="HTML", reply_markup=get_skills_type_keyboard())
    await state.set_state(ProfileState.choosing_skill_type)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –Ø–ó–´–ö–û–í –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø =====

@router.message(ProfileState.choosing_skill_type, F.text == "üíª –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
async def choose_programming_language(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_popular_programming_keyboard()
    )
    await state.set_state(ProfileState.programming_language)

@router.callback_query(F.data.startswith("prog_"))
async def process_programming_selection(callback: CallbackQuery, state: FSMContext):
    programming_map = {
        "prog_python": "Python", "prog_js": "JavaScript", "prog_java": "Java",
        "prog_cpp": "C++", "prog_sql": "SQL", "prog_php": "PHP",
        "prog_go": "Go", "prog_ruby": "Ruby", "prog_swift": "Swift"
    }
    
    if callback.data == "prog_other":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await state.set_state(ProfileState.programming_language)
    else:
        language = programming_map[callback.data]
        await state.update_data(programming_language=language)
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: <b>{language}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_level_keyboard()
        )
        await state.set_state(ProfileState.programming_language_level)
    await callback.answer()

@router.message(ProfileState.programming_language, F.text)
async def process_custom_programming(message: Message, state: FSMContext):
    await state.update_data(programming_language=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è <b>{message.text}</b>:",
        parse_mode="HTML",
        reply_markup=get_level_keyboard()
    )
    await state.set_state(ProfileState.programming_language_level)

@router.message(ProfileState.programming_language_level, F.text)
async def process_programming_level(message: Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('programming_language')
    level = message.text
    
    if not language:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞: /skills")
        await state.clear()
        return
    
    await db.add_user_programming(message.from_user.id, language, level)
    await db.add_xp_to_user(message.from_user.id, 15)
    
    badge_awarded = await db.add_badge_to_user(message.from_user.id, "programming_added")
    
    success_message = f"üíª <b>–î–æ–±–∞–≤–ª–µ–Ω —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {language} ({level})\n+15 XP!\n"
    if badge_awarded: success_message += "üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ '–ö–æ–¥–µ—Ä'!\n\n"
    success_message += "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–≤—ã–∫–∏?"
    
    await message.answer(success_message, parse_mode="HTML", reply_markup=get_skills_type_keyboard())
    await state.set_state(ProfileState.choosing_skill_type)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –î–†–£–ì–ò–• –ù–ê–í–´–ö–û–í =====

@router.message(ProfileState.choosing_skill_type, F.text == "üîß –î—Ä—É–≥–∏–µ –Ω–∞–≤—ã–∫–∏")
async def choose_other_skills(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:",
        reply_markup=get_popular_skills_keyboard()
    )
    await state.set_state(ProfileState.other_skill)

@router.callback_query(F.data.startswith("skill_"))
async def process_skill_selection(callback: CallbackQuery, state: FSMContext):
    skills_map = {
        "skill_leadership": "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", "skill_communication": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
        "skill_design": "–î–∏–∑–∞–π–Ω", "skill_analysis": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "skill_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", "skill_marketing": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"
    }
    
    if callback.data == "skill_other":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞:")
        await state.set_state(ProfileState.other_skill)
    else:
        skill = skills_map[callback.data]
        await state.update_data(skill=skill)
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω –Ω–∞–≤—ã–∫: <b>{skill}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_level_keyboard()
        )
        await state.set_state(ProfileState.other_skill_level)
    await callback.answer()

@router.message(ProfileState.other_skill, F.text)
async def process_custom_skill(message: Message, state: FSMContext):
    await state.update_data(skill=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è <b>{message.text}</b>:",
        parse_mode="HTML",
        reply_markup=get_level_keyboard()
    )
    await state.set_state(ProfileState.other_skill_level)

@router.message(ProfileState.other_skill_level, F.text)
async def process_skill_level(message: Message, state: FSMContext):
    data = await state.get_data()
    skill = data.get('skill')
    level = message.text
    
    if not skill:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞: /skills")
        await state.clear()
        return
    
    await db.add_user_skill(message.from_user.id, skill, level)
    await db.add_xp_to_user(message.from_user.id, 15)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –±–µ–π–¥–∂–∞ "–ú–∞—Å—Ç–µ—Ä –Ω–∞–≤—ã–∫–æ–≤"
    user_stats = await db.get_user_stats(message.from_user.id)
    badge_awarded = False
    if user_stats['total_skills'] >= 5:
        badge_awarded = await db.add_badge_to_user(message.from_user.id, "skill_master")
    
    success_message = f"üîß <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–∞–≤—ã–∫:</b> {skill} ({level})\n+15 XP!\n"
    if badge_awarded: success_message += "üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ '–ú–∞—Å—Ç–µ—Ä –Ω–∞–≤—ã–∫–æ–≤'!\n\n"
    success_message += "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–≤—ã–∫–∏?"
    
    await message.answer(success_message, parse_mode="HTML", reply_markup=get_skills_type_keyboard())
    await state.set_state(ProfileState.choosing_skill_type)

# ===== –û–ë–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

@router.message(ProfileState.choosing_skill_type, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
async def finish_skills(message: Message, state: FSMContext):
    await message.answer(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /myprofile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

@router.message(StateFilter(ProfileState))
async def process_unknown_message_in_skills(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å üôÇ\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /cancel —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤"
    )

@router.message(Command("cancel"))
async def cmd_cancel_skills(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–æ.\n–¢–≤–æ–∏ —É–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        reply_markup=get_main_keyboard()
    )