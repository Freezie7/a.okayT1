from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from database import db
from config import BADGES

router = Router()

@router.message(Command("myprofile"))
async def cmd_view_profile(message: Message):
    user = await db.get_user(message.from_user.id)
    if not user: return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    languages = await db.get_user_languages(message.from_user.id)
    programming = await db.get_user_programming(message.from_user.id)
    skills = await db.get_user_skills(message.from_user.id)
    user_badges = await db.get_user_badges(message.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞–≤—ã–∫–∞–º–∏
    skills_text = ""
    if languages: skills_text += "\nüåç <b>–Ø–∑—ã–∫–∏:</b>\n" + "\n".join([f"‚Ä¢ {lang['language']} ({lang['level']})" for lang in languages])
    if programming: skills_text += "\nüíª <b>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n" + "\n".join([f"‚Ä¢ {prog['language']} ({prog['level']})" for prog in programming])
    if skills: skills_text += "\nüîß <b>–ù–∞–≤—ã–∫–∏:</b>\n" + "\n".join([f"‚Ä¢ {skill['skill']} ({skill['level']})" for skill in skills])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –±–µ–π–¥–∂–∞–º–∏
    badges_text = ""
    if user_badges:
        badges_text = "\n\nüèÜ <b>–ë–µ–π–¥–∂–∏:</b>\n" + "\n".join([f"‚Ä¢ {BADGES.get(badge, {}).get('name', badge)}" for badge in user_badges])
    
    profile_text = (
        f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"<b>–ò–º—è:</b> {user['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–û —Å–µ–±–µ:</b> {user['about'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {user['education_level'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ({user['education_place'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})\n"
        f"<b>–¶–µ–ª—å:</b> {user['career_goal'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
        f"{skills_text}"
        f"{badges_text}\n\n"
        f"‚≠ê <b>–û–ø—ã—Ç:</b> {user['xp']} XP\n"
        f"<i>–ò—Å–ø–æ–ª—å–∑—É–π /skills —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –Ω–∞–≤—ã–∫–æ–≤</i>"
    )
    
    await message.answer(profile_text, parse_mode="HTML")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–π–¥–∂–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ
@router.message(Command("badges"))
async def cmd_badges(message: Message):
    user_badges = await db.get_user_badges(message.from_user.id)
    
    if not user_badges:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –±–µ–π–¥–∂–µ–π üò¢\n–ó–∞–ø–æ–ª–Ω—è–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–æ–±–∞–≤–ª—è–π –Ω–∞–≤—ã–∫–∏ —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!")
        return
    
    badges_text = "üèÜ <b>–¢–≤–æ–∏ –±–µ–π–¥–∂–∏:</b>\n\n"
    for badge in user_badges:
        badge_info = BADGES.get(badge, {})
        badges_text += f"‚Ä¢ {badge_info.get('name', badge)} - {badge_info.get('desc', '')}\n"
    
    badges_text += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    await message.answer(badges_text, parse_mode="HTML")