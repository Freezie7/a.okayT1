from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from database import db
from config import BADGES
from keyboards.main_kb import get_main_keyboard

router = Router()

@router.message(Command("myprofile"))
async def cmd_view_profile(message: Message):
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    languages = await db.get_user_languages(message.from_user.id)
    programming = await db.get_user_programming(message.from_user.id)
    skills = await db.get_user_skills(message.from_user.id)
    user_badges = await db.get_user_badges(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    is_profile_complete = all([
        user['name'], 
        user['about'], 
        user['education_level'], 
        user['education_place'],
        user['career_goal']
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞–≤—ã–∫–∞–º–∏
    skills_text = ""
    if languages: 
        skills_text += "\nüåç <b>–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏:</b>\n" + "\n".join([f"‚Ä¢ {lang['language']} ({lang['level']})" for lang in languages])
    if programming: 
        skills_text += "\nüíª <b>–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n" + "\n".join([f"‚Ä¢ {prog['language']} ({prog['level']})" for prog in programming])
    if skills: 
        skills_text += "\nüîß <b>–î—Ä—É–≥–∏–µ –Ω–∞–≤—ã–∫–∏:</b>\n" + "\n".join([f"‚Ä¢ {skill['skill']} ({skill['level']})" for skill in skills])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –±–µ–π–¥–∂–∞–º–∏
    badges_text = ""
    if user_badges:
        badges_text = "\n\nüèÜ <b>–ë–µ–π–¥–∂–∏:</b>\n" + "\n".join([f"‚Ä¢ {BADGES.get(badge, {}).get('name', badge)}" for badge in user_badges])
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    profile_complete_text = ""
    if not is_profile_complete:
        profile_complete_text = "\n\n‚ö†Ô∏è <i>–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ò—Å–ø–æ–ª—å–∑—É–π /profile —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</i>"
    else:
        profile_complete_text = "\n\n‚úÖ <i>–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω! –ú–æ–ª–æ–¥–µ—Ü!</i>"
    
    profile_text = (
        f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"<b>–ò–º—è:</b> {user['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–û —Å–µ–±–µ:</b> {user['about'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {user['education_level'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ({user['education_place'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})\n"
        f"<b>–¶–µ–ª—å:</b> {user['career_goal'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
        f"{skills_text}"
        f"{badges_text}"
        f"{profile_complete_text}\n\n"
        f"‚≠ê <b>–û–ø—ã—Ç:</b> {user['xp']} XP\n"
        f"<i>–ò—Å–ø–æ–ª—å–∑—É–π /skills —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –Ω–∞–≤—ã–∫–æ–≤</i>"
    )
    
    await message.answer(profile_text, parse_mode="HTML")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–π–¥–∂–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ
@router.message(Command("badges"))
async def cmd_badges(message: Message):
    user_badges = await db.get_user_badges(message.from_user.id)
    
    if not user_badges:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –±–µ–π–¥–∂–µ–π üò¢\n"
            "–ó–∞–ø–æ–ª–Ω—è–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /profile –∏ –¥–æ–±–∞–≤–ª—è–π –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ /skills —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å! üí™"
        )
        return
    
    badges_text = "üèÜ <b>–¢–≤–æ–∏ –±–µ–π–¥–∂–∏:</b>\n\n"
    for badge in user_badges:
        badge_info = BADGES.get(badge, {})
        badges_text += f"‚Ä¢ <b>{badge_info.get('name', badge)}</b> - {badge_info.get('desc', '')}\n"
    
    badges_text += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    await message.answer(badges_text, parse_mode="HTML")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤
@router.message(Command("my_skills"))
async def cmd_my_skills(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    languages = await db.get_user_languages(user_id)
    programming = await db.get_user_programming(user_id)
    skills = await db.get_user_skills(user_id)
    
    if not languages and not programming and not skills:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ üò¢\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /skills —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≤—ã–∫–∏! üîß"
        )
        return
    
    skills_text = "üìä <b>–¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏:</b>\n\n"
    
    if languages:
        skills_text += "üåç <b>–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏:</b>\n"
        for lang in languages:
            skills_text += f"‚Ä¢ {lang['language']} ({lang['level']})\n"
        skills_text += "\n"
    
    if programming:
        skills_text += "üíª <b>–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        for prog in programming:
            skills_text += f"‚Ä¢ {prog['language']} ({prog['level']})\n"
        skills_text += "\n"
    
    if skills:
        skills_text += "üîß <b>–î—Ä—É–≥–∏–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
        for skill in skills:
            skills_text += f"‚Ä¢ {skill['skill']} ({skill['level']})\n"
    
    skills_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π /skills —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏!"
    
    await message.answer(skills_text, parse_mode="HTML")